import * as dotenv from 'dotenv'
dotenv.config()

import { Telegraf, Markup, Scenes } from 'telegraf'
import { message } from 'telegraf/filters'
import { session } from 'telegraf'
import { Stage } from 'telegraf/scenes'

import { STICKER } from './sticker.js'
import { isNumber } from './util.js'
import { getUrl } from './url.js'

const SCENE_ID = 'CONTACT_DATA_WIZARD_SCENE_ID'
// TODO: set proper typings
const contactDataWizard = new Scenes.WizardScene<any>(
  SCENE_ID,
  async (ctx) => {
    await ctx.reply(`
      ü§ó –£ –º–µ–Ω—è –µ—Å—Ç—å —Å–∞–º–æ–∫–∞—Ç—ã –¥–ª—è —Ä–µ–±—è—Ç —Å —Ä–æ—Å—Ç–æ–º –æ—Ç 100 –¥–æ 200 —Å–º. \n\n‚úåÔ∏è –ü–æ–¥—Å–∫–∞–∂–∏ —Å–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö, –∏ —è –ø–æ–∫–∞–∂—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    `)
    ctx.scene.state = {}
    ctx.wizard.next()
  },
  async (ctx) => {
    const input = ctx.message?.text?.trim()
    const inputNumber = parseInt(input, 10)

    if (!isNumber(input)) {
      await ctx.reply(
        'üòµ –ü—Ä–æ—Å—Ç–∏, –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª. –ü–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. \n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑–æ–∫',
      )
      return
    }

    await ctx.reply(
      getUrl(inputNumber),
      Markup.inlineKeyboard([
        Markup.button.callback('–ü–æ–¥–±–µ—Ä—ë–º –µ—â—ë —Ä–∞–∑–æ–∫', 'Go'),
        Markup.button.callback('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'Home'),
      ]),
    )

    return await ctx.scene.leave()
  },
)

const stage = new Stage<Scenes.SceneContext>(
  [contactDataWizard],
  // {
  // default: 'CONTACT_DATA_WIZARD_SCENE_ID',
  // }
)

const bot = new Telegraf<Scenes.SceneContext>(process.env.BOT_TOKEN || '')

bot.use(session())
bot.use(stage.middleware())
bot.use(Telegraf.log())

bot.start(async (ctx) => {
  await ctx.reply('Welcome to the party')
  await ctx.replyWithSticker(STICKER.partyCat)

  return await ctx.reply(
    '–ü—Ä–∏–≤–µ—Ç',
    Markup.inlineKeyboard([
      Markup.button.callback('–ü–æ–¥–æ–±—Ä–∞—Ç—å —Ç—Ä—é–∫–æ–≤–æ–π —Å–∞–º–æ–∫–∞—Ç', 'Go'),
    ]),
  )
})

bot.on(message('text'), async (ctx) => {
  return await ctx.reply(
    '–ü—Ä–∏–≤–µ—Ç',
    Markup.inlineKeyboard([
      Markup.button.callback('–ü–æ–¥–æ–±—Ä–∞—Ç—å —Ç—Ä—é–∫–æ–≤–æ–π —Å–∞–º–æ–∫–∞—Ç', 'Go'),
    ]),
  )
})

bot.action('Go', async (ctx) => {
  await ctx.answerCbQuery()
  return await ctx.scene.enter(SCENE_ID)
})

bot.action('Home', async (ctx) => {
  await ctx.answerCbQuery()
  return await ctx.reply(
    '–ü—Ä–∏–≤–µ—Ç',
    Markup.inlineKeyboard([
      Markup.button.callback('–ü–æ–¥–æ–±—Ä–∞—Ç—å —Ç—Ä—é–∫–æ–≤–æ–π —Å–∞–º–æ–∫–∞—Ç', 'Go'),
    ]),
  )
})

bot.launch()

console.log('___bot_has_started___')

process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))
